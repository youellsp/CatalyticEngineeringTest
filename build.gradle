buildscript {
	ext {
		springBootVersion = '1.4.0.RELEASE'
	}
	repositories {
		mavenCentral()
		mavenLocal()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('se.transmode.gradle:gradle-docker:1.2')
	}
}
group = 'youellsp'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'idea'
apply plugin: 'docker'

jar {
	baseName = 'engineeringtest'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	mavenLocal()
}
sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration-test/java')
		}
		resources.srcDir file('src/integration-test/resources')
	}
}
configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}
dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("org.springframework.boot:spring-boot-starter-data-jpa")
	runtime('mysql:mysql-connector-java')
	compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.5.0'
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.5.0'
	testCompile('org.springframework.boot:spring-boot-starter-test')
}
task integrationTest(type: Test) {
	testClassesDir = sourceSets.integrationTest.output.classesDir
	classpath = sourceSets.integrationTest.runtimeClasspath
	outputs.upToDateWhen { false }
}
//Ensure that the check task fails the build if there are failing integration tests.
check.dependsOn integrationTest
//Ensure that our unit tests are run before our integration tests
integrationTest.mustRunAfter test

//Ensure that the HTML reports of unit and integration tests are written to different directories.
tasks.withType(Test) {
	reports.html.destination = file("${reporting.baseDir}/${name}")
}

//Builds the docker image
task buildDocker(type: Docker) {
	baseImage = 'develar/java:latest'
	push = project.hasProperty('push')
	tag = 'youellsp/engineering-test'
	addFile {
		from jar
		rename {'engineering-test-app.jar'}
	}
	entryPoint(['java', '-Djava.security.egd=file:/dev/./urandom', '-jar', '/engineering-test-app.jar'])
	exposePort(8080)
}

buildDocker.dependsOn(build)
